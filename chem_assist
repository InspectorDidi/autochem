#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from chem_assistant.user_scripts import *
from chem_assistant.core import Settings
from chem_assistant.core.thermo import make_ir_spectra
from importlib import import_module
import argparse
import sys


parser = argparse.ArgumentParser()
parser.add_argument('-m', '--meta', help='Make files using a meta.py file in each subdirectory', action='store_true')
parser.add_argument('-t', '--thermochem', help='Runs thermochemical analysis of frequency calculations. Also acts on subdirectories of the current directory', action='store_true')
parser.add_argument('-f', '--free-energies', help='Calculates free energies from a csv produced by running `chem_assist -t`.\
 Also asks for a csv containing the interaction energies from single point energy calculations,\
 written using `chem_assist -c`, preferably in the same :directory as the thermo data csv', action='store')
parser.add_argument('-r', '--results', help='Finds results of output files with the extension of log or out. Note: also navigates subdirectories', action='store_true')
parser.add_argument('-d', '--dir-tree-from-files', help='Creates a directory tree with relevant job scripts from a directory called "files"', action='store_true')
parser.add_argument('-e', '--equil-coords', help='Searches for equilibrium coordinates recursively', action='store_true')
parser.add_argument('-s', '--settings', help='Indicates a file with settings relevant to the calculation required. In the file, must have a Settings object called sett', action='store')
parser.add_argument('-g', '--graph', help='Plot a graph of energies against iterations for geometry optimisations', action='store')
parser.add_argument('-i', '--ir', help='Give a hessian log file as an argument, plots IR spectra', action='store')
parser.add_argument('-b', '--hydrogen-bonds', help='Finds hydrogen bonds between molecules in every xyz in the current directory', action='store_true')
parser.add_argument('-c', '--interaction-energies', help='Automating the process of calculating interaction energies. Takes a csv as input- only works if the csv passed in was created using this script', action='store')
parser.add_argument('-p', '--print-frags', help='Prints fragments for every xyz file in the current directory', action='store_true')
parser.add_argument('-v', '--verbose', help='Prints additional information when used with -p, or prints formatted table if used with --interaction-energies', action='store_true')
parser.add_argument('--with-ionic', help='Use with --interaction-energies to indicate that a purely ionic network is present', action='store_true')
parser.add_argument('--soft', help='Use with --interaction-energies to indicate that output is from gamess or psi4 software. Use `gamess` or `psi`', action='store')
parser.add_argument('-o', '--output', help='Use with --interaction-energies to give filename of csv to save data to.', action='store')
parser.add_argument('-w', '--weight', help='Apply boltzmann weightings according to total energy of the csv passed in. Apply a group with --group, and pass in a pandas command to generate different groups', action='store')
parser.add_argument('--group', help="Pandas command to apply groups to the csv passed into --weight. Refer to the dataframe as df. Example command: `chem_assist -w data.csv --group df['Config'].str.split('-').str[:-1].str.join('-')`", action='store', type=str)
parser.add_argument('--geodesics', help='Recursivley pull geodesic charges from GAMESS calculations.', action='store_true')
args = parser.parse_args()

def imported_settings():
    file_to_import = args.settings[:-3] #lose the .py extension
    imported = import_module(file_to_import)
    return imported.sett

# if no arguments passed
if len(sys.argv) == 1:
    parser.print_help()

if args.meta:
   make_files_from_meta('.') 

if args.thermochem:
    thermochemistry('.')
    
if args.free_energies:
    calculate_free_energy_interactions(args.free_energies)

if args.results:
    if not args.output:
        args.output='energies.csv'
    results_table('.', file_name=args.output)

if args.settings:
    settings = imported_settings()

if args.dir_tree_from_files and args.settings:
    settings = imported_settings()
    xyz_to_tree(settings)

if args.dir_tree_from_files and not args.settings:
    settings = Settings()
    # default options- Settings object required even 
    # if empty
    xyz_to_tree(settings)

if args.graph:
    plot_opt(args.graph)

if args.equil_coords:
    search_for_coords('.')
    
if args.ir:
    make_ir_spectra(args.ir)

if args.hydrogen_bonds:
    get_h_bonds('.')

if args.interaction_energies:
    calculate_interaction_energies(args.interaction_energies, ionic_present=args.with_ionic, pretty_print=args.verbose, software=args.soft, output=args.output)
    
if args.print_frags:
    print_frags('.', verbose=args.verbose)

if args.weight:
    if not args.group:
        args.group = "df['Config']"
    if not args.output:
        args.ouput = 'weighted.csv'
    apply_boltzmann_weightings(args.weight, args.group, output=args.output)

if args.geodesics:
    if not args.output:
        args.output = 'charges.csv'
    geodesics('.', output=args.output)
