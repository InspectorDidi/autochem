#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from chem_assistant.user_scripts import *
from chem_assistant.core import Settings
from chem_assistant.core.thermo import make_ir_spectra
from importlib import import_module
import argparse
import sys


parser = argparse.ArgumentParser()
parser.add_argument('-m', '--meta', help='Make files using a meta.py file in each subdirectory', action='store_true')
parser.add_argument('-t', '--thermochem', help='Runs thermochemical analysis of frequency calculations. Also acts on subdirectories of the current directory', action='store_true')
parser.add_argument('-f', '--free-energies', help='Calculates free energies from a csv produced by running `chem_assist -t`.\
 Also asks for a csv containing the interaction energies from single point energy calculations,\
 written using `chem_assist -c`, preferably in the same directory as the thermo data csv', action='store')
parser.add_argument('-r', '--results', help='Finds results of output files with the extension of log or out. Note: also navigates subdirectories', action='store_true')
parser.add_argument('-d', '--dir-tree-from-files', help='Creates a directory tree with relevant job scripts from a directory called "files"', action='store_true')
parser.add_argument('-e', '--equil-coords', help='Searches for equilibrium coordinates recursively', action='store_true')
parser.add_argument('-s', '--settings', help='Indicates a file with settings relevant to the calculation required. In the file, must have a Settings object called sett', action='store')
parser.add_argument('-g', '--graph', help='Plot a graph of energies against iterations for geometry optimisations', action='store')
parser.add_argument('-i', '--ir', help='Give a hessian log file as an argument, plots IR spectra', action = 'store')
parser.add_argument('-b', '--hydrogen-bonds', help='Finds hydrogen bonds between molecules in every equil.xyz in the current and any subdirectory', action = 'store_true')
parser.add_argument('-c', '--interaction-energies', help='Automating the process of calculating interaction energies. Takes a csv as input- only works if the csv passed in was created using this script', action = 'store')
args = parser.parse_args()

def imported_settings():
    file_to_import = args.settings[:-3] #lose the .py extension
    imported = import_module(file_to_import)
    return imported.sett

def menu_choice():
    try:
        choice = int(input('Choice: [0] '))
        if option not in range(1, 9):
            print('Choose a value between 1 and 9')
        else:
            return option
    except ValueError:
        print('Please select a number between 1 and 9')
        menu_choice()

# if no arguments passed
if len(sys.argv) == 1:
    print('Comp Chem Automation\n')
    print("""\
1. Create files from xyz directory
2. Create files using meta.py
3. Find energies
4. Find equilibrium coordinates from optimisations
5. Find hydrogen bonds from xyz files
6. Automate interaction energy calculations
7. Create IR spectra from hessian
8. Plot course of optimisation
0. Exit program
""")
    choice = menu_choice()
    
    # option = {1: 

    
    # option.get(choice, 0)


if args.meta:
   make_files_from_meta('.') 

if args.thermochem:
    name = thermochemistry('.')
    done = False
    while not done:
        ints = input('Calculate free energies? [Y/N] ')
        if ints.lower() in ('y', 'n'):
            done = True
            if ints.lower() == 'y':
                calculate_free_energy_interactions(name)
        else:   
            print("Please select 'y' or 'n'")
    
if args.free_energies:
    calculate_free_energy_interactions(args.free_energies)
    

if args.results:
    name = results_table('.')
    done = False
    while not done:
        ints = input('Calculate interaction energies? [Y/N] ')
        if ints.lower() in ('y', 'n'):
            done = True
            if ints.lower() == 'y':
                calculate_interaction_energies(name)
        else:   
            print("Please select 'y' or 'n'")

if args.settings:
    settings = imported_settings()

if args.dir_tree_from_files and args.settings:
    settings = imported_settings()
    xyz_to_tree(settings)

if args.dir_tree_from_files and not args.settings:
    settings = Settings()
    # default options- Settings object required even 
    # if empty
    xyz_to_tree(settings)

if args.graph:
    plot_opt(args.graph)

if args.equil_coords:
    search_for_coords('.')
    
    answer = False
    while not answer:
        try:
            extra = input(\
"""Create additional jobs using the `equil.xyz` files just found, 
by placing meta.py files into the appropriate directories? [Y/N] """)
        except ValueError: # type error?
            print("Please choose 'Y' or 'N'")
        if extra.upper() in ('Y', 'N'):
            answer = True
        else:
            print("Please choose 'Y' or 'N'")

    if extra.upper() == "Y":
        create_extra_jobs('.')

if args.ir:
    make_ir_spectra(args.ir)

if args.hydrogen_bonds:
    get_h_bonds('.')

if args.interaction_energies:
    calculate_interaction_energies(args.interaction_energies)
